*** createApp 表示创建一个 Vue 应用(vue 实例），存储在 app 变量中
*** 传入的参数表示，这个应用最外层的组件，应该如何展示

const app = Vue.createApp({
  data() {
    return {
      message: 'hello world'   
    }   
  },
  template: '<div>{{message}}</div>'
});
app.mount('#root');

// vm 代表的就是 vue 应用的根组件
const vm = app.mount('#root');



*** MVVM 设计模式， M -> modal 数据， V -> view 视图， VM -> viewModal 视图数据连接层



*** 生命周期函数：在某一时刻会自动执行的函数

beforeCreate 在实例生成之前会自动执行的函数（分析事件和生命周期）
created 在实例生成之后会自动执行的函数（分析注入和数据响应）
beforeMount 在组件内容被渲染到页面之前立即自动执行的函数
mounted 在组件内容被渲染到页面之后自动执行的函数
beforeUpdate 当 data 中的数据发生变化时会自动执行的函数
updated 当 data 中的数据发生变化，同时页面完成更新后，会自动执行的函数
beforeUnmount 当 Vue 应用失效时，自动执行的函数  （app.unmount() 被执行，Vue 应用就失效啦）
unmounted 当 Vue 应用失效时，且 dom完全销毁之后，自动执行的函数



computed 可以缓存
watch 支持异步
*** computed 和 method 都能实现的一个功能，建议使用 computed，因为有缓存
*** computed 和 watcher 都能实现的功能，建议使用 computed 因为更加简洁



*** 操作数组可以重新渲染视图的方法
Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新
1.push pop shift unshift splice sort reverse（变更方法）
2.也可以改变数组的引用（替换方法,可以通过filter， concat，slice等）
3.$set
你可能认为 方法2 这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。
Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。
当然，改变数组的方法不止以上这些，但是其他方法并不会被 Vue 监听，也就不会改变视图

以上方法在 vue2 中支持，在 vue3 中可以直接更新数组的内容
如: this.list[1] = 'f';



*** 操作对象可以重新渲染视图的方法
1.$set
2.也可以改变对象的引用（替换方法）

以上方法在 vue2 中支持，在 vue3 中可以直接更新对象的内容，也可以自动的展示出来
如: this.obj.age = 100; // age 是 obj 对象的新属性, 如果 age 是已有属性的话， vue2 中也可以实现



*** v-for 也可以循环一个整数



*** 在 vue2 中：
不推荐在同一元素上使用 v-if 和 v-for，当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。性能不好。

*** 在 vue3 中：
不推荐在同一元素上使用 v-if 和 v-for，当它们处于同一节点，v-if 的优先级比 v-for 更高，这意味着 v-if 将没有权限访问 v-for 里的变量。



*** vue3 中有多事件处理器
<!-- 这两个 one() 和 two() 将执行按钮点击事件 -->
<button @click="one($event), two($event)">
  Submit
</button>



*** 组件具备复用性
*** 全局组件，只要定义啦，处处可以使用，性能不高，但是使用起来简单
*** 局部组件，定义啦，要注册之后才能使用，性能比较高



*** 父子组件传值 props
type: String Boolean Array Object Function Symbol
required 必填
default 默认值
validator 是一个函数，接受属性值，可以做深度校验



*** Non-prop 属性(当子组件没有通过 props 接收父组件传递过来的值时）
inheritAttrs: false // 不继承父组件传过来的属性值



*** vue3 可以有多个根节点
当有多个根节点时，子组件无法自动继承父组件传过来的属性值，需要加 v-bind="$attrs", 这个是继承所有属性，也可以绑定单个属性，如： v-bind:msg="$attrs.msg"



*** 子组件中的 emits 属性
可以通过 emits 选项在组件上定义发出的事件
app.component('custom-form', {
  emits: ['inFocus', 'submit']
})



*** v-model 参数
默认情况下，组件上的 v-model 使用 modelValue 作为 prop 和 update:modelValue 作为事件
我们可以通过向 v-model 传递参数来修改这些名称：
<my-component v-model:title="bookTitle"></my-component>
组件将需要一个 title prop 并发出 update:title 要同步的事件。
添加到组件 v-model 的修饰符将通过 modelModifiers prop 提供给组件：
 props: {
    modelValue: String,
    modelModifiers: {
      default: () => ({})
    }
  }



*** 具名插槽
在向具名插槽提供内容的时候，我们可以在一个 <template> 元素上使用 v-slot 指令，并以 v-slot 的参数的形式提供其名称
<template v-slot:header>
    <h1>Here might be a page title</h1>
</template>
跟 v-on 和 v-bind 一样，v-slot 也有缩写，即把参数之前的所有内容 (v-slot:) 替换为字符 #。例如 v-slot:header 可以被重写为 #header



*** 作用域插槽
绑定在 <slot> 元素上的 attribute 被称为插槽 prop。现在在父级作用域中，我们可以使用带值的 v-slot 来定义我们提供的插槽 prop 的名字：
<template v-slot:default="slotProps">
    <i class="fas fa-check"></i>
    <span class="green">{{ slotProps.item }}</span>
</template>
在这个例子中，我们选择将包含所有插槽 prop 的对象命名为 slotProps，但你也可以使用任意你喜欢的名字



*** 动态组件：根据数据的变化，结合 component 这个标签，来随时动态切换组件的显示
*** 异步组件：异步执行某些组件的逻辑 defineAsyncComponent



*** Provide/Inject 
无论组件层次结构有多深，父组件都可以作为其所有子组件的依赖提供者。这个特性有两个部分：父组件有一个 provide 选项来提供数据，子组件有一个 inject 选项来开始使用这些数据。默认情况下，provide/inject 绑定并不是响应式的。



*** mixin 混入（vue2 中也有）
组件 data，methods 优先级高于 mixin data，methods 优先级
例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。
生命周期函数，先执行 mixin 里面的，再执行组件里面的
自定义的属性，组件中的属性优先级高于 mixin 属性的优先级
自定义选项合并策略：
const app = Vue.createApp({})
app.config.optionMergeStrategies.customOption = (mixinVal, appVal) => {
  return mixinVal || appVal // 使 mixin 中自定义属性的优先级更高
}
缺点：维护性不高



*** 自定义指令
app.directive('pin', {
  mounted(el, binding) {
    el.style.position = 'fixed'
    const s = binding.arg || 'top'
    el.style[s] = binding.value + 'px'
  },
  updated(el, binding) {
    const s = binding.arg || 'top'
    el.style[s] = binding.value + 'px'
  }
})
你可能想在 mounted 和 updated 时触发相同行为，而不关心其他的钩子函数。那么你可以通过将这个回调函数传递给指令来实现：
app.directive('pin', (el, binding) => {
  el.style.position = 'fixed'
  const s = binding.arg || 'top'
  el.style[s] = binding.value + 'px'
})



*** Teleport 传送门功能
Teleport 提供了一种干净的方法，允许我们控制在 DOM 中哪个父节点下渲染了 HTML，而不必求助于全局状态或将其拆分为两个组件。



*** 渲染函数（render 函数）
template -> render -> h -> 虚拟DOM（JS对象） -> 真实 DOM -> 展示到页面上
h() 函数是一个用于创建 VNode（虚拟 DOM） 的实用程序



*** 插件（plugin），把通用性的功能封装起来
const myPlugin = {
 install: (app, options) => {
    app.config.globalProperties.$translate = (key) => {
      return key.split('.')
        .reduce((o, i) => { if (o) return o[i] }, options)
    }

    app.provide('i18n', options)

    app.directive('my-directive', {
      mounted (el, binding, vnode, oldVnode) {
        // some logic ...
      }
      ...
    })

    app.mixin({
      created() {
        // some logic ...
      }
      ...
    })
  }
}
App.use(myPlugin);



*** 组合式API（composition API）
setup() 函数是 created 实例被完全初始化之前执行，所以在它内部不能使用 this，不能调用实例上的一些方法，
但是在其他一些方法中，可以通过 this.$options.setup() 访问 setup 函数返回值；
setup 返回值的数据（方法）模板可以直接使用
setup 有两个参数，props 和 context
setup(props, context) {
  // props 接收父组件的传值
  const { attrs, slots, emit } = context;
  // attrs None-Props 属性
  // slots 父组件传递过来的插槽，可以通过 h 函数渲染出节点
  // () => h('div', {}, slots.default())
  // emit 调用父组件的函数 
}
setup 数据不具备响应式

*** 如何使 setup 中的数据具备响应式
ref， reactive 响应式的引用
ref 处理基础类型的数据
reactive 处理非基础类型的数据
原理：通过 proxy 对数据进行封装，当数据变化时，触发模版等内容的更新

例子: let name = ref('dell');
// 意思就是把 'dell' 变成 proxy ({value: 'dell'}) 这样的一个响应式引用

例子：let nameObj = reactive({name: 'dell'});
// 意思就是把 {name: 'dell'} 变成 proxy ({name: 'dell'}) 这样的一个响应式引用

如果要使用解构单独 return 对象中的一个值, 要使用 toRefs 才能变成响应式的
const { name } = toRefs(nameObj);
// 意思就是把 {name: 'dell'} 变成 {name: proxy ({value: 'dell'})} 这样的一个响应式引用

如果 const { age } = toRefs(nameObj); 但是 nameObj 中没有 age 属性，会报错，
这种情况下，可以使用 toRef， 但是不需要用解构，直接 const age = toRef(nameObj, 'age'); 初始值是 undefined

*** readonly 可以对上面响应式的引用做限制，不可修改


*** computed
setup() {
 const { computed, ref } = Vue;
 const name = ref('du');
 const nameLong = computed(() => {
   return name + 'long';
 })
}


*** watch
* 具备一定的惰性 lazy
* 参数可以拿到原始和当前值
// 基础类型
setup() {
 const { watch, ref } = Vue;
 const name = ref('du');
 watch(name, (currentValue, prevValue) => {
   console.log(currentValue, prevValue)
 })
}


// 引用类型
setup() {
 const { watch,reactive } = Vue;
 const nameObj = reactive({name: 'du'});
 watch(() => nameObj.name, (currentValue, prevValue) => {
   console.log(currentValue, prevValue)
 })
}


// 如果监听多个值
// 可以监听多个数据的变化，用一个监听器承载
setup() {
 const { watch,reactive } = Vue;
 const nameObj = reactive({name: 'du', age: 18});
 watch([() => nameObj.name,() => nameObj.age], ([currentName, currentAge],[prevName, prevAge]) => {
   console.log(currentName, prevName)
 })
}


// 也可以让 watch 变成非惰性的
setup() {
 const { watch,reactive } = Vue;
 const nameObj = reactive({name: 'du', age: 18});
 watch([() => nameObj.name,() => nameObj.age], ([currentName, currentAge],[prevName, prevAge]) => {
   console.log(currentName, prevName)
 }, {immediate: true})
}


*** watchEffect
// 立即执行，没有惰性 immediate
// 不需要传递你要监听的内容，自动会感知代码依赖，不需要传递很多参数，只需要传递一个回调函数
// 不能获取之前数据的值
setup() {
 const { watch,reactive } = Vue;
 const nameObj = reactive({name: 'du', age: 18});
 watchEffect(() => {
  console.log(nameObj.name)
 })
}

// 定时器取消监听 watch 也可以
const stop = watchEffect(() => {
  console.log(nameObj.name);
  setTimeout(() => {
     stop();
  }, 5000)
})



**** setup 中生命周期新写法
beforeMount => onBeforeMount
mounted => onMounted
beforeUpdate => onBeforeUpdate
updated => onUpdated
beforeUnmount => onBeforeUnmount
unmounted => onUnmounted

keep-alive
activated => onAcivated
deactivated => onDeactivated

*** 为什么 setup 中没有提供 beforeCreate 和 created 生命周期函数 ？
因为 setup 的执行就在 beforeCreate 和 created 之间，需要写在这两个生命周期里的函数，可以直接在 setup 中写
因为 setup 是围绕 beforeCreate 和 created 生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在 setup 函数中编写。

*** setup 中新增的生命周期函数
onRenderTracked 每次渲染重新收集响应式依赖的时候就会执行 return 几个响应式数据，就会收集执行几次
onRenderTriggered 每次触发页面重新渲染的时候会执行
onErrorCaptured 当捕获到来自子孙组件的一个异常时执行

执行顺序(初次渲染）
onBeforeMount (开始渲染） ---> onRenderTracked（收集依赖） ---> onMounted（渲染完成）
更新的时候
onRenderTriggered（状态触发） ---> onBeforeUpdate (开始更新）---> onRenderTracked（收集依赖） ---> onUpdated (更新完成）






**** setup 中 使用 provide/inject
父组件的 setup 中:
setup() {
  const { provide, ref, readonly } = Vue;
  const name = ref('dell');
  provide('name', readonly(name)); // readonly 限制不能在子组件中修改
  provide('changeName', (value) => {
     name.value = value;
  });
  return {}
}
任意子组件或者孙子组件的 setup 中:
setup() {
  const { inject, ref } = Vue;
  const name = inject('name');
  const changeName = inject('changeName');
  const handleClick = () => {
     changeName('dll');
  }
  return {name, handleClick}
}



**** compositionAPI 语法下，获取真实的 DOM 元素节点
const app = Vue.createApp({
   setup() {
     const { ref, onMounted } = Vue;
     const hello = ref(null);
     onMounted(() = {
        console.log(hello.value);
     })
     return { hello }
   },
   template:`
      <div>
        <div ref="hello">hello</div>
      </div>
   `
});



*** nrm 
npm install nrm -g
nrm ls
nrm use taobao


*** router-link 是跳转路由的标签
*** router-view 负责展示当前路由对应的组件内容



*** VueX 数据管理框架， VueX 创建了一个全局唯一的仓库，用来存放全局的数据
setup 中使用 vuex:
首先 import { useStore, toRefs } from 'vuex';
在 setup 函数中:
setup() {
  const store = useStore();
  const { name } = toRefs(store.state);
  return { name }
}











  


